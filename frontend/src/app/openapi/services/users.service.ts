/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPortalRoleApiUsersUserIdRolesPost } from '../fn/users/add-portal-role-api-users-user-id-roles-post';
import { AddPortalRoleApiUsersUserIdRolesPost$Params } from '../fn/users/add-portal-role-api-users-user-id-roles-post';
import { changePasswordApiUsersPasswordUserIdPatch } from '../fn/users/change-password-api-users-password-user-id-patch';
import { ChangePasswordApiUsersPasswordUserIdPatch$Params } from '../fn/users/change-password-api-users-password-user-id-patch';
import { createUserApiUsersPost } from '../fn/users/create-user-api-users-post';
import { CreateUserApiUsersPost$Params } from '../fn/users/create-user-api-users-post';
import { deleteUserApiUsersDelete } from '../fn/users/delete-user-api-users-delete';
import { DeleteUserApiUsersDelete$Params } from '../fn/users/delete-user-api-users-delete';
import { getAllRolesApiUsersAllRolesGet } from '../fn/users/get-all-roles-api-users-all-roles-get';
import { GetAllRolesApiUsersAllRolesGet$Params } from '../fn/users/get-all-roles-api-users-all-roles-get';
import { getAllUsersApiUsersGet } from '../fn/users/get-all-users-api-users-get';
import { GetAllUsersApiUsersGet$Params } from '../fn/users/get-all-users-api-users-get';
import { removePortalRoleApiUsersUserIdRolesDelete } from '../fn/users/remove-portal-role-api-users-user-id-roles-delete';
import { RemovePortalRoleApiUsersUserIdRolesDelete$Params } from '../fn/users/remove-portal-role-api-users-user-id-roles-delete';
import { ShowUser } from '../models/show-user';
import { UpdatedUserResponse } from '../models/updated-user-response';
import { updateUserByIdApiUsersPatch } from '../fn/users/update-user-by-id-api-users-patch';
import { UpdateUserByIdApiUsersPatch$Params } from '../fn/users/update-user-by-id-api-users-patch';


/**
 * Operations with users.
 */
@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllUsersApiUsersGet()` */
  static readonly GetAllUsersApiUsersGetPath = '/api/users/';

  /**
   * Get All Users.
   *
   * Get all users.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsersApiUsersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersApiUsersGet$Response(params?: GetAllUsersApiUsersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShowUser>>> {
    return getAllUsersApiUsersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get All Users.
   *
   * Get all users.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsersApiUsersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersApiUsersGet(params?: GetAllUsersApiUsersGet$Params, context?: HttpContext): Observable<Array<ShowUser>> {
    return this.getAllUsersApiUsersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShowUser>>): Array<ShowUser> => r.body)
    );
  }

  /** Path part for operation `createUserApiUsersPost()` */
  static readonly CreateUserApiUsersPostPath = '/api/users/';

  /**
   * Create User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUserApiUsersPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUserApiUsersPost$Response(params: CreateUserApiUsersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createUserApiUsersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUserApiUsersPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUserApiUsersPost(params: CreateUserApiUsersPost$Params, context?: HttpContext): Observable<number> {
    return this.createUserApiUsersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteUserApiUsersDelete()` */
  static readonly DeleteUserApiUsersDeletePath = '/api/users/';

  /**
   * Delete User.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserApiUsersDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserApiUsersDelete$Response(params: DeleteUserApiUsersDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deleteUserApiUsersDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete User.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserApiUsersDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserApiUsersDelete(params: DeleteUserApiUsersDelete$Params, context?: HttpContext): Observable<number> {
    return this.deleteUserApiUsersDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateUserByIdApiUsersPatch()` */
  static readonly UpdateUserByIdApiUsersPatchPath = '/api/users/';

  /**
   * Update User By Id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserByIdApiUsersPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserByIdApiUsersPatch$Response(params: UpdateUserByIdApiUsersPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdatedUserResponse>> {
    return updateUserByIdApiUsersPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update User By Id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserByIdApiUsersPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserByIdApiUsersPatch(params: UpdateUserByIdApiUsersPatch$Params, context?: HttpContext): Observable<UpdatedUserResponse> {
    return this.updateUserByIdApiUsersPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdatedUserResponse>): UpdatedUserResponse => r.body)
    );
  }

  /** Path part for operation `getAllRolesApiUsersAllRolesGet()` */
  static readonly GetAllRolesApiUsersAllRolesGetPath = '/api/users/all-roles';

  /**
   * Get All Roles.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRolesApiUsersAllRolesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRolesApiUsersAllRolesGet$Response(params?: GetAllRolesApiUsersAllRolesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllRolesApiUsersAllRolesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get All Roles.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRolesApiUsersAllRolesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRolesApiUsersAllRolesGet(params?: GetAllRolesApiUsersAllRolesGet$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllRolesApiUsersAllRolesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `addPortalRoleApiUsersUserIdRolesPost()` */
  static readonly AddPortalRoleApiUsersUserIdRolesPostPath = '/api/users/{user_id}/roles';

  /**
   * Add Portal Role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPortalRoleApiUsersUserIdRolesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPortalRoleApiUsersUserIdRolesPost$Response(params: AddPortalRoleApiUsersUserIdRolesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdatedUserResponse>> {
    return addPortalRoleApiUsersUserIdRolesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Add Portal Role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPortalRoleApiUsersUserIdRolesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPortalRoleApiUsersUserIdRolesPost(params: AddPortalRoleApiUsersUserIdRolesPost$Params, context?: HttpContext): Observable<UpdatedUserResponse> {
    return this.addPortalRoleApiUsersUserIdRolesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdatedUserResponse>): UpdatedUserResponse => r.body)
    );
  }

  /** Path part for operation `removePortalRoleApiUsersUserIdRolesDelete()` */
  static readonly RemovePortalRoleApiUsersUserIdRolesDeletePath = '/api/users/{user_id}/roles';

  /**
   * Remove Portal Role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removePortalRoleApiUsersUserIdRolesDelete()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  removePortalRoleApiUsersUserIdRolesDelete$Response(params: RemovePortalRoleApiUsersUserIdRolesDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<UpdatedUserResponse>> {
    return removePortalRoleApiUsersUserIdRolesDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Remove Portal Role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removePortalRoleApiUsersUserIdRolesDelete$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  removePortalRoleApiUsersUserIdRolesDelete(params: RemovePortalRoleApiUsersUserIdRolesDelete$Params, context?: HttpContext): Observable<UpdatedUserResponse> {
    return this.removePortalRoleApiUsersUserIdRolesDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<UpdatedUserResponse>): UpdatedUserResponse => r.body)
    );
  }

  /** Path part for operation `changePasswordApiUsersPasswordUserIdPatch()` */
  static readonly ChangePasswordApiUsersPasswordUserIdPatchPath = '/api/users/password/{user_id}';

  /**
   * Change Password.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePasswordApiUsersPasswordUserIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePasswordApiUsersPasswordUserIdPatch$Response(params: ChangePasswordApiUsersPasswordUserIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return changePasswordApiUsersPasswordUserIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Change Password.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePasswordApiUsersPasswordUserIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePasswordApiUsersPasswordUserIdPatch(params: ChangePasswordApiUsersPasswordUserIdPatch$Params, context?: HttpContext): Observable<number> {
    return this.changePasswordApiUsersPasswordUserIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
