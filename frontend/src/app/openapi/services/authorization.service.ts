/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { loginApiAuthTokenPost } from '../fn/authorization/login-api-auth-token-post';
import { LoginApiAuthTokenPost$Params } from '../fn/authorization/login-api-auth-token-post';
import { logoutApiAuthLogoutPost } from '../fn/authorization/logout-api-auth-logout-post';
import { LogoutApiAuthLogoutPost$Params } from '../fn/authorization/logout-api-auth-logout-post';
import { readUsersMeApiAuthUsersMeGet } from '../fn/authorization/read-users-me-api-auth-users-me-get';
import { ReadUsersMeApiAuthUsersMeGet$Params } from '../fn/authorization/read-users-me-api-auth-users-me-get';
import { ShowUser } from '../models/show-user';


/**
 * User authorization endpoints.
 */
@Injectable({ providedIn: 'root' })
export class AuthorizationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `loginApiAuthTokenPost()` */
  static readonly LoginApiAuthTokenPostPath = '/api/auth/token';

  /**
   * Login.
   *
   * User authorization and token receipt.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginApiAuthTokenPost()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  loginApiAuthTokenPost$Response(params: LoginApiAuthTokenPost$Params, context?: HttpContext): Observable<StrictHttpResponse<({
[key: string]: string;
} | null)>> {
    return loginApiAuthTokenPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Login.
   *
   * User authorization and token receipt.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginApiAuthTokenPost$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  loginApiAuthTokenPost(params: LoginApiAuthTokenPost$Params, context?: HttpContext): Observable<({
[key: string]: string;
} | null)> {
    return this.loginApiAuthTokenPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<({
[key: string]: string;
} | null)>): ({
[key: string]: string;
} | null) => r.body)
    );
  }

  /** Path part for operation `logoutApiAuthLogoutPost()` */
  static readonly LogoutApiAuthLogoutPostPath = '/api/auth/logout';

  /**
   * Logout.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logoutApiAuthLogoutPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  logoutApiAuthLogoutPost$Response(params?: LogoutApiAuthLogoutPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return logoutApiAuthLogoutPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Logout.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logoutApiAuthLogoutPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logoutApiAuthLogoutPost(params?: LogoutApiAuthLogoutPost$Params, context?: HttpContext): Observable<any> {
    return this.logoutApiAuthLogoutPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `readUsersMeApiAuthUsersMeGet()` */
  static readonly ReadUsersMeApiAuthUsersMeGetPath = '/api/auth/users/me';

  /**
   * Read Users Me.
   *
   * Retrieves the current active user's information.
   *
   * This endpoint allows authenticated users to fetch their own user details.
   *
   * Args:
   *     current_user (ShowUser): The current active user, resolved via dependency injection.
   *
   * Returns:
   *     ShowUser: The details of the current active user.
   *
   * Raises:
   *     HTTPException: If the user is inactive.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `readUsersMeApiAuthUsersMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  readUsersMeApiAuthUsersMeGet$Response(params?: ReadUsersMeApiAuthUsersMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ShowUser>> {
    return readUsersMeApiAuthUsersMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Read Users Me.
   *
   * Retrieves the current active user's information.
   *
   * This endpoint allows authenticated users to fetch their own user details.
   *
   * Args:
   *     current_user (ShowUser): The current active user, resolved via dependency injection.
   *
   * Returns:
   *     ShowUser: The details of the current active user.
   *
   * Raises:
   *     HTTPException: If the user is inactive.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `readUsersMeApiAuthUsersMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  readUsersMeApiAuthUsersMeGet(params?: ReadUsersMeApiAuthUsersMeGet$Params, context?: HttpContext): Observable<ShowUser> {
    return this.readUsersMeApiAuthUsersMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ShowUser>): ShowUser => r.body)
    );
  }

}
